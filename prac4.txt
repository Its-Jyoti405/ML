import pandas as pd
import numpy as np
--
data = pd.read_csv('Documents/ML/Admission_Predict.csv')
data
--
data['Chance of Admit '] = [1 if each > 0.85 else 0 for each in data['Chance of Admit ']]
data
--
x = data.iloc[:,1:-1]
y = data.iloc[:,-1]
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.25,random_state = 1)
print(f'x train : {x_train.shape}')
print(f'y train : {y_train.shape}')
print(f'x test : {x_test.shape}')
print(f'y test : {y_test.shape}')
--
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import ConfusionMatrixDisplay,accuracy_score
from sklearn.metrics import classification_report

model_lr = LogisticRegression(random_state = 1,solver = 'lbfgs',max_iter = 1000)
model_lr.fit(x_train,y_train)
y_pred_lr = model_lr.predict(x_test)

import matplotlib.pyplot as plt
ConfusionMatrixDisplay.from_predictions(y_test,y_pred_lr)
plt.title('Logistic Regression')
plt.show()
print(f'Accuracy : {accuracy_score(y_test,y_pred_lr)}')
print(classification_report(y_test,y_pred_lr))
--
from sklearn.tree import DecisionTreeClassifier

model_dt = DecisionTreeClassifier(random_state = 1)
model_dt.fit(x_train,y_train)

y_pred_dt = model_dt.predict(x_test)

ConfusionMatrixDisplay.from_predictions(y_test, y_pred_dt)
plt.title('Decision Tree')
plt.show()
print(f'Accuracy : {accuracy_score(y_test,y_pred_dt)}')
print(classification_report(y_test,y_pred_dt))
--
from sklearn.ensemble import RandomForestRegressor

model_rf = RandomForestRegressor(random_state = 1)
model_rf.fit(x_train,y_train)

y_pred_rf = model_rf.predict(x_test)

y_pred_rf = [1 if each > 0.75 else 0 for each in y_pred_rf]

ConfusionMatrixDisplay.from_predictions(y_test, y_pred_rf)
plt.title('Random Forest Regression')
plt.show()
print(f'Accuracy : {accuracy_score(y_test,y_pred_rf)}')
print(classification_report(y_test,y_pred_rf))
--