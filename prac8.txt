import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping
--------------------------------------
data = pd.read_csv('Documents/lithium-ion batteries.csv')
-------------------------------------------
data
--------------------------------------
X = data.drop(columns=['Materials Id', 'Formula', 'Spacegroup', 'Crystal System'])
y = LabelEncoder().fit_transform(data['Crystal System'])  # Target encoding
--------------------------------------------
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
------------------------------------------------
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
-------------------------------------------------
model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train_scaled.shape[1],)),
    Dropout(0.5),  # Add dropout to prevent overfitting
    Dense(32, activation='relu'),
    Dropout(0.5),
    Dense(16, activation='relu'),
    Dense(3, activation='softmax')  # Adjust output layer if your target has different classes
])
--------------------------------------------------
model.compile(optimizer=Adam(learning_rate=0.0005), loss='sparse_categorical_crossentropy', metrics=['accuracy'])
----------------------------------------------------
early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)
------------------------------------------------------
history = model.fit(X_train_scaled, y_train, epochs=50, batch_size=32, validation_split=0.2, callbacks=[early_stopping])
------------------------------------------------------
loss, accuracy = model.evaluate(X_test_scaled, y_test)
print(f'Accuracy: {accuracy * 100:.2f}%')
-------------------------------------------------------------
